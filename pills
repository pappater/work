// app

import React, { useState, useEffect, useRef } from 'react';
import { isTextPresent } from './util';
import Content from './components/Content';
import Table from './components/Table';
import ExtraContent from './components/ExtraContent';

const RandomText = () => {
  const [textArray, setTextArray] = useState([]);
  const [charsPerLine, setCharsPerLine] = useState(0);
  const [numberOfLines, setNumberOfLines] = useState(0);
  const [highlightData, setHighlightData] = useState([]);
  const [renderedText, setRenderedText] = useState('');
  const [scrollPosition, setScrollPosition] = useState(0);

  const highlightListRef = useRef(null);

  const testcharacters = `ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz                              `;
  const charWidth = 10;
  const charHeight = 18;

  const generateInitialText = () => {
    const width = window.innerWidth * 0.995; // 80% of the width
    const height = window.innerHeight * 0.9;

    const calculatedCharsPerLine = Math.floor(width / charWidth);
    const calculatedNumberOfLines = Math.floor(height / charHeight);
    const totalChars = calculatedCharsPerLine * calculatedNumberOfLines;

    const initialTextArray = Array.from({ length: totalChars }, () => {
      return testcharacters[Math.floor(Math.random() * testcharacters.length)];
    });

    setCharsPerLine(calculatedCharsPerLine);
    setNumberOfLines(calculatedNumberOfLines);
    setTextArray(initialTextArray);
  };

  useEffect(() => {
    generateInitialText();

    const handleResize = () => {
      generateInitialText();
    };

    window.addEventListener('resize', handleResize);

    const interval = setInterval(() => {
      setTextArray((prevTextArray) => {
        const newTextArray = [...prevTextArray];
        const updatesPerInterval = Math.floor(newTextArray.length * 0.05 + Math.floor(Math.random() * 20) + 1);

        for (let i = 0; i < updatesPerInterval; i++) {
          const randomPosition = Math.floor(Math.random() * newTextArray.length);
          newTextArray[randomPosition] = testcharacters[Math.floor(Math.random() * testcharacters.length)];
        }

        return newTextArray;
      });
    }, 300);

    return () => {
      clearInterval(interval);
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  useEffect(() => {
    const calculateHighlights = () => {
      let newHighlights = [];
      let newText = '';

      for (let i = 0; i < numberOfLines; i++) {
        const lineStart = i * charsPerLine;
        const lineEnd = lineStart + charsPerLine;
        const line = textArray.slice(lineStart, lineEnd).join('');
        const splits = line.split(' ');

        const highlightedLine = splits.map((word, index) => {
          if (isTextPresent(word)) {
            newHighlights.push({ line: i, wordIndex: index, text: word });
            return `<span class="highlight" style="background-color: red">${word}</span>`;
          }
          return word;
        }).join(' ');

        newText += highlightedLine;
      }

      if (newHighlights.length > 0) {
        setHighlightData(prevHighlights => [...prevHighlights, ...newHighlights]);
      }

      setRenderedText(newText);
    };

    calculateHighlights();
  }, [textArray, charsPerLine, numberOfLines]);

  useEffect(() => {
    if (highlightListRef.current) {
      highlightListRef.current.scrollTop = highlightListRef.current.scrollHeight;
    }
  }, [highlightData]);

  useEffect(() => {
    const handleScroll = () => {
      setScrollPosition(window.scrollY);
    };

    window.addEventListener('scroll', handleScroll);

    return () => {
      window.removeEventListener('scroll', handleScroll);
    };
  }, []);

  return (
    <>
    <h1 className='md:hidden text-9xl m-auto w-full text-center mt-10' >PILLS.</h1>
      {/* Header */}
      <div className={`grid md:grid-cols-4 gap-4 text-slate-300 md:m-20 m-10`} >
        <div className="col-span-3 h-[99vh] overflow-hidden">
          <div className="text-justify">
            <div
              dangerouslySetInnerHTML={{ __html: renderedText }}
            />
          </div>
        </div>

        <div className="flex flex-wrap max-h-screen overflow-y-auto text-justify" ref={highlightListRef}>
          {[...new Set(highlightData.map((highlight) => highlight.text.toUpperCase()))].map((uniqueText, index) => (
            <a key={index} className="text-slate-300 mr-4 flex-1 flex-wrap" href={`https://en.wikipedia.org/wiki/${uniqueText}`} target='_blank' rel='noopener noreferrer'>{uniqueText}</a>
          ))}
        </div>
      </div>

      {/* Content */}
      <div className='md:grid md:grid-cols-2 hidden'>
        {/* Sub content 1 */}
        <div
          className="header sticky top-0 text-[150px] font-extrabold h-screen bg-red-600 text-white"
        >
          PILLS.
        </div>

        {/* Sub content 2 */}
        <div className="bg-red-600">
          <div
            className="  transform translate-x-1/2 transition-transform  ease-smooth"
            style={{
              transform: `translate(-50%, -${scrollPosition* 0.1}px)`,
              zIndex: 50,
            }}
          >
            <div className="max-w-3xl mx-auto">
              <Content />
              <Table />
              <ExtraContent />
              <hr className="w-[30%] my-9 mx-auto bg-slate-800 rounded-md border-slate-800 h-2" />
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default RandomText;



// 
import fileContent from './assets/a.txt?raw';

// Convert file content into a Set for fast lookup
const dictionaryWords = new Set(fileContent.split('\n').map(word => word.trim().toLowerCase()));

/**
 * Checks if a given text is present in the dictionary file.
 * @param {string} text - The text to check.
 * @returns {boolean} - Returns true if the text is present, false otherwise.
 */
export const isTextPresent = (text) => {
  return dictionaryWords.has(text.toLowerCase().trim());
};



//content 

import React from 'react';

const Content = () => {
  return (
    <>
      <div className='w-[70%] m-auto'>
        <h1 className='text-11xl font-extrabold'>{"English Open Word List (EOWL) "}</h1>
        <p>The “English Open Word List” (EOWL) was developed by Ken Loge, but is almost entirely derived from the “UK Advanced Cryptics Dictionary” (UKACD) Version 1.6, by J Ross Beresford. The original copyright document for the UKACD can be found here.

          As a developer of word games or spelling checkers you may find few public domain word lists available that are well-maintained and thorough. The “UK Advanced Cryptics Dictionary” is an excellent and comprehensive word list, but it isn’t particularly well-suited for certain Scrabble™ style computer word games. I created the EOWL for this purpose.

          The EOWL currently contains about 128,985 words. To make EOWL more usable for computer word games all words longer than 10 letters were removed from the UKACD source list, and all proper nouns and words requiring diacritical symbols, hyphens, and apostrophes were removed. This makes it much like the standard ENABLE word list, but EOWL is somewhat smaller (by 44,000 words or so) since it contains no words longer than 10 characters. I separated the original single word list document into 26 individual files to make it easier to work with and added select words from the “Scrabble™ Players Dictionary, Third Edition™ 1995, ISBN 0-87779-220-8.”

          The current distribution of words for each letter in EOWL is listed side.</p>
      </div>
    </>
  );
};

export default Content;



//extea conte 

import React from 'react';

const ExtraContent = () => {
 

  return (
    <div style={{width:'70%', margin:'auto'}}>
   DIFFERENCES BETWEEN UKACD & EOWL:
UK Advanced Cryptics Dictionary (UKACD):

Some entries are more than one word in length. Some entries include words longer than 10 letters. Diacritics from other languages are largely intact. Proper nouns are included in the list. Hyphenated word entries are included in the list. English Open Word List (EOWL):

All multiple word entries have been removed. All words are 10 letters or less in length. All diacritic symbols have been removed. All proper nouns have been removed. All hyphenated word entries have been removed. Note that all files in EOWL are encoded as Unicode (UTF-8), with Unix style line breaks.

Below, you will find the original licensing information for the “UK Advanced Cryptics Dictionary.”

UK Advanced Cryptics Dictionary Licensing Information:

Copyright © J Ross Beresford 1993-1999. All Rights Reserved. The following restriction is placed on the use of this publication: if the UK Advanced Cryptics Dictionary is used in a software package or redistributed in any form, the copyright notice must be prominently displayed and the text of this document must be included verbatim.

There are no other restrictions: I would like to see the list distributed as widely as possible.
    </div>
  );
};

export default ExtraContent;


//tabel 

import React from 'react';

const Table = () => {
  return (
    <div className="w-4/5 mx-auto my-4">
      <table className="w-full border-collapse">
        <thead>
          <tr className="bg-black text-white">
            <th className="border border-gray-300 px-4 py-2">Letter</th>
            <th className="border border-gray-300 px-4 py-2">Words Count</th>
            <th className="border border-gray-300 px-4 py-2">Letter</th>
            <th className="border border-gray-300 px-4 py-2">Words Count</th>
          </tr>
        </thead>
        <tbody>
          {[
            ['A', '7,296', 'N', '2,522'],
            ['B', '7,272', 'O', '3,681'],
            ['C', '11,382', 'P', '10,278'],
            ['D', '7,217', 'Q', '720'],
            ['E', '5,151', 'R', '6,794'],
            ['F', '5,389', 'S', '15,917'],
            ['G', '4,747', 'T', '7,289'],
            ['H', '4,500', 'U', '4,425'],
            ['I', '3,685', 'V', '2,364'],
            ['J', '1,287', 'W', '3,147'],
            ['K', '1,577', 'X', '122'],
            ['L', '4,126', 'Y', '608'],
            ['M', '6,891', 'Z', '624'],
          ].map((row, index) => (
            <tr key={index} className={index % 2 === 0 ? 'bg-gray-800' : ''}>
              {row.map((cell, i) => (
                <td key={i} className="border border-gray-300 px-4 py-2 text-center">
                  {cell}
                </td>
              ))}
            </tr>
          ))}
          <tr>
            <td colSpan="2" className="font-bold text-center border border-gray-300 px-4 py-2">Total Words:</td>
            <td colSpan="2" className="font-bold text-center border border-gray-300 px-4 py-2">128,985</td>
          </tr>
        </tbody>
      </table>
    </div>
  );
};

export default Table;


// package.json 

{
  "name": "randomtext",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.0",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.9.0",
    "eslint-plugin-react": "^7.35.0",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.9",
    "globals": "^15.9.0",
    "postcss": "^8.4.41",
    "raw-loader": "^4.0.2",
    "tailwindcss": "^3.4.10",
    "vite": "^5.4.1"
  }
}


//tailwid 

module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {
      fontSize: {
        '10xl': '10rem',  // Custom size
        '11xl': '12rem',  // Another custom size
        // Add more sizes as needed
      },
      transitionTimingFunction: {
        'smooth': 'cubic-bezier(0.4, 0, 0.2, 1)',
      },
    },
  },
  plugins: [],
}
